#! /usr/bin/env python3
# Author: Martin C. Frith 2011
# SPDX-License-Identifier: GPL-3.0-or-later

# Read segment-tuples in SEG format, and write them with overlapping
# and touching ones merged.

# Should it be called seg-union?

# Internally, this algorithm replaces the length (1st column) with the
# end coordinate in the 1st sequence.

from __future__ import print_function

import itertools, operator, optparse, os, signal, sys

def sortedSegInput(fileNames):
    oldSortKey = "", 0
    if not fileNames:
        fileNames = ["-"]
    for fileName in fileNames:
        if fileName == "-":
            f = sys.stdin
        else:
            f = open(fileName)
        for line in f:
            s = line.split()
            if line[0] == "#" or not s:
                continue
            for i in range(0, len(s), 2):
                s[i] = int(s[i])
            s[0] += s[2]  # replace length with end
            newSortKey = s[1], s[2]
            if newSortKey < oldSortKey:
                raise Exception("input not sorted properly")
            oldSortKey = newSortKey
            yield s

def writeSeg(s):
    s[0] -= s[2]  # replace end with length
    print("\t".join(map(str, s)))

def writeOrKeep(oldSegs, newSeg):
    for i in oldSegs:
        if i[1] < newSeg[1] or i[0] < newSeg[2]:
            writeSeg(i)  # it can't overlap any more: write & discard
        else:
            yield i  # it might overlap something: keep it

def isSame(things):
    """Are all the things the same?"""
    g = itertools.groupby(things)
    for i in g: break
    for i in g: return False
    return True

def mergeOneNewSeg(oldSegs, y):
    for x in oldSegs:
        if x[3::2] == y[3::2] and isSame(map(operator.sub, x[2::2], y[2::2])):
            if x[0] < y[0]:  # merge overlapping SEGs
                x[0] = y[0]
            return
    oldSegs.append(y)  # the new SEG did not overlap any previous one

def segMerge(opts, args):
    oldSegs = []
    for i in sortedSegInput(args):
        oldSegs = list(writeOrKeep(oldSegs, i))
        mergeOneNewSeg(oldSegs, i)
    for i in oldSegs:
        writeSeg(i)

if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message

    usage = "%prog seg-file(s)"
    description = "Merge overlapping and touching segment-tuples."
    op = optparse.OptionParser(usage=usage, description=description)
    opts, args = op.parse_args()

    try: segMerge(opts, args)
    except KeyboardInterrupt: pass  # avoid silly error message
    except Exception as e:
        prog = os.path.basename(sys.argv[0])
        sys.exit(prog + ": error: " + str(e))
