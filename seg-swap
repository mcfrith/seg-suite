#! /usr/bin/env python

# Copyright 2011, 2012 Martin C. Frith

# Read segment-tuples in SEG format, and write them after swapping the
# order of segments in each tuple.

# Also, canonicalize strands, i.e. ensure that the first segment in
# each tuple is on the forward strand, by flipping strands if
# necessary.

import fileinput, optparse, os, signal, sys

def flip(seg):
    minusLength = -int(seg[0])
    for i in range(2, len(seg), 2):
        seg[i] = str(minusLength - int(seg[i]))

def segSwap(opts, args):
    x = opts.n * 2 - 1
    y = opts.n * 2 + 1
    for line in fileinput.input(args):
        s = line.split()
        if not s or s[0][0] == "#":
            continue
        mytemp = s[1:3]
        s[1:3] = s[x:y]
        s[x:y] = mytemp
        if s[2][0] == "-" and not opts.s:
            flip(s)
        print "\t".join(s)

if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message

    usage = "%prog [options] seg-file(s)"
    description = "Swap the order of segments in segment-tuples."
    op = optparse.OptionParser(usage=usage, description=description)
    op.add_option("-n", type="int", default=2,
                  help="swap the Nth segment with the first segment (default=%default)")
    op.add_option("-s", action="store_true",
                  help="do not canonicalize strands")
    opts, args = op.parse_args()
    if opts.n < 1: op.error("option -n: should be > 0")

    try: segSwap(opts, args)
    except KeyboardInterrupt: pass  # avoid silly error message
    except Exception, e:
        prog = os.path.basename(sys.argv[0])
        sys.exit(prog + ": error: " + str(e))
